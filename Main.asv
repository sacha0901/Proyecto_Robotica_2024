
function varargout = Main(varargin)
    % Inicialización del GUI
    gui_Singleton = 1;
    gui_State = struct('gui_Name', mfilename, ...
                       'gui_Singleton', gui_Singleton, ...
                       'gui_OpeningFcn', @Main_OpeningFcn, ...
                       'gui_OutputFcn', @Main_OutputFcn, ...
                       'gui_LayoutFcn', [], ...
                       'gui_Callback', []);
    if nargin && ischar(varargin{1})
        gui_State.gui_Callback = str2func(varargin{1});
    end
    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
    end
end

% --- Executes just before Main is made visible.
function Main_OpeningFcn(hObject, eventdata, handles, varargin)
    % Inicialización de variables globales y configuración inicial del GUI
    handles.serialPort = [];
    handles.L1 = 129;
    handles.L2 = 14;
    handles.L3 = 120;
    handles.L4 = 122;
    handles.l = [handles.L1; handles.L2; handles.L3; handles.L4];

    % Configuración inicial de botones y texto
    set(handles.btnConexion, 'BackgroundColor', get(0, 'defaultUicontrolBackgroundColor'));
    set(handles.txtPuerto, 'String', 'Desconectado');

    handles.output = hObject;
    guidata(hObject, handles);
end

% --- Outputs from this function are returned to the command line.
function varargout = Main_OutputFcn(hObject, eventdata, handles)
    varargout{1} = handles.output;
end

% --- Executes on button press in btnKT.
function btnKT_Callback(hObject, eventdata, handles)
    % Obtiene los ángulos de las articulaciones en grados desde los campos de texto y los convierte a radianes
    q = [deg2rad(str2double(get(handles.edtQ1, 'String'))), ...
         deg2rad(str2double(get(handles.edtQ2, 'String'))), ...
         deg2rad(str2double(get(handles.edtQ3, 'String')))];

    % Configura y grafica el robot
    RB = crearRobot(handles);
    graficarRobot(RB, q, handles.axes1);

    % Calcula y muestra la matriz de transformación homogénea
    T = calcularMatrizTH(q, handles.l);
    mostrarMatrizTH(T, handles.uitableMatrizTH);

    % Muestra los parámetros DH en la tabla
    mostrarParametrosDH(q, handles.l, handles.uitableParametrosDH);
    % 
    % % Muestra la posición calculada en la consola
    % disp('Posición calculada (Cinemática Directa):');
    % disp(['x: ', num2str(T(1,4))]);
    % disp(['y: ', num2str(T(2,4))]);
    % disp(['z: ', num2str(T(3,4))]);

        % Envía los ángulos al Arduino
    if ~isempty(handles.serialPort) && strcmp(handles.serialPort.Status, 'open')
        enviarAngulosSerial(q, handles.serialPort);
    end
end

% --- Executes on button press in btnCalcular.
function btnCalcular_Callback(hObject, eventdata, handles)
    % Obtiene las coordenadas de posición deseada desde los campos de texto
    p = [str2double(get(handles.edtX, 'String')); ...
         str2double(get(handles.edtY, 'String')); ...
         str2double(get(handles.edtZ, 'String'))];

    % Calcula los ángulos de las articulaciones utilizando cinemática inversa
    [q1, q2, q3] = Inversa_q1_q2_q3(p, handles.l);
    q = [q1 q2 q3];

    % Configura y grafica el robot
    RB = crearRobot(handles);
    graficarRobot(RB, q, handles.axes1);
    % 
    % % Muestra los ángulos calculados en la consola
    % disp('Ángulos calculados (Cinemática Inversa):');
    % disp(['q1: ', num2str(rad2deg(q1)), ' grados']);
    % disp(['q2: ', num2str(rad2deg(q2)), ' grados']);
    % disp(['q3: ', num2str(rad2deg(q3)), ' grados']);

    % Envía los ángulos al Arduino
    if ~isempty(handles.serialPort) && strcmp(handles.serialPort.Status, 'open')
        enviarAngulosSerial(q, handles.serialPort);
    end

    % Muestra los parámetros DH en la tabla
    mostrarParametrosDH(q, handles.l, handles.uitableParametrosDH);
end

% --- Executes on button press in btnConexion.
function btnConexion_Callback(hObject, eventdata, handles)
    % Maneja la conexión y desconexión del puerto serial
    if get(hObject, 'Value') == 1
        conectarSerial(hObject, handles);
         
    else
        desconectarSerial(hObject, handles);
    end
end

% Función para crear el robot utilizando los parámetros DH
function RB = crearRobot(handles)
    L(1) = Link([0 handles.L1 handles.L2 pi/2 0]);
    L(2) = Link([0 0 handles.L3 0 0]);
    L(3) = Link([0 0 handles.L4 0 0]);
    RB = SerialLink(L, 'name', 'MiRobot');
end

% Función para graficar el robot en el espacio de trabajo
function graficarRobot(RB, q, axesHandle)
    workspace = [-500 500 -500 500 0 1000];
    axes(axesHandle);
    cla;
    RB.plot(q, 'workspace', workspace, 'delay', 0);
end

% Función para calcular la matriz de transformación homogénea
function T = calcularMatrizTH(q, l)
    syms theta d a alpha_ real
    A = [cos(theta), -sin(theta)*cos(alpha_), sin(theta)*sin(alpha_), a*cos(theta);
         sin(theta), cos(theta)*cos(alpha_), -cos(theta)*sin(alpha_), a*sin(theta);
         0, sin(alpha_), cos(alpha_), d;
         0, 0, 0, 1];

    theta1 = q(1); d1 = l(1); a1 = l(2); alpha1 = pi/2;
    theta2 = q(2); d2 = 0; a2 = l(3); alpha2 = 0;
    theta3 = q(3); d3 = 0; a3 = l(4); alpha3 = 0;

    A01 = subs(A, {theta, d, a, alpha_}, {theta1, d1, a1, alpha1});
    A12 = subs(A, {theta, d, a, alpha_}, {theta2, d2, a2, alpha2});
    A23 = subs(A, {theta, d, a, alpha_}, {theta3, d3, a3, alpha3});

    T = double(A01 * A12 * A23);
end

% Función para mostrar la matriz de transformación homogénea en una tabla
function mostrarMatrizTH(T, uitableHandle)
    T_data = cell(size(T));
    for i = 1:size(T, 1)
        for j = 1:size(T, 2)
            if (i == 1 && j == 4) || (i == 2 && j == 4) || (i == 3 && j == 4)
                T_data{i, j} = ['<html><font color="blue">' num2str(T(i, j)) '</font></html>'];
            elseif (i >= 1 && i <= 3) && (j >= 1 && j <= 3)
                T_data{i, j} = ['<html><font color="orange">' num2str(T(i, j)) '</font></html>'];
            else
                T_data{i, j} = num2str(T(i, j));
            end
        end
    end
    set(uitableHandle, 'Data', T_data);
end

% Función para mostrar los parámetros DH en una tabla
function mostrarParametrosDH(q, l, uitableHandle)
    theta_deg = rad2deg(q);
    parametros_DH_data = {
        theta_deg(1), l(1), l(2), pi/2;
        theta_deg(2), 0, l(3), 0;
        theta_deg(3), 0, l(4), 0
    };
    set(uitableHandle, 'Data', parametros_DH_data);
end

% Función para conectar al puerto serial utilizando serialport
function conectarSerial(hObject, handles)
    portName = 'COM12'; % Ajustar según sea necesario
    baudRate = 9600; % Ajustar según sea necesario
    try
        handles.serialPort = serialport(portName, baudRate);
        configureTerminator(handles.serialPort, "LF");
        fopen(handles.serialPort);
        
        set(handles.txtPuerto, 'String', ['Conectado a ' portName]);
        set(hObject, 'BackgroundColor', 'green');
        guidata(hObject, handles);
        
    catch
        set(handles.txtPuerto, 'String', 'Error al conectar');
        set(hObject, 'Value', 0); % Resetear el estado del botón
    end
end

% Función para desconectar del puerto serial
function desconectarSerial(hObject, handles)
    if ~isempty(handles.serialPort) && isvalid(handles.serialPort)
        fclose(handles.serialPort);
        delete(handles.serialPort);
        handles.serialPort = [];
        set(handles.txtPuerto, 'String', 'Desconectado');
        set(hObject, 'BackgroundColor', get(0, 'defaultUicontrolBackgroundColor'));
        guidata(hObject, handles);
    end
end

% Callback functions for slider and edit text
function edtQ1_Callback(hObject, eventdata, handles)
    % Código para manejar el cambio en el campo de texto edtQ1
end

function edtQ2_Callback(hObject, eventdata, handles)
    % Código para manejar el cambio en el campo de texto edtQ2
end

function edtQ3_Callback(hObject, eventdata, handles)
    % Código para manejar el cambio en el campo de texto edtQ3
end

function edtX_Callback(hObject, eventdata, handles)
    % Código para manejar el cambio en el campo de texto edtX
end

function edtY_Callback(hObject, eventdata, handles)
    % Código para manejar el cambio en el campo de texto edtY
end

function edtZ_Callback(hObject, eventdata, handles)
    % Código para manejar el cambio en el campo de texto edtZ
end

% Slider create functions
function sliderQ1_CreateFcn(hObject, eventdata, handles)
    setSliderDefaultBackground(hObject);
end

function sliderQ2_CreateFcn(hObject, eventdata, handles)
    setSliderDefaultBackground(hObject);
end

function sliderQ3_CreateFcn(hObject, eventdata, handles)
    setSliderDefaultBackground(hObject);
end

function edtQ1_CreateFcn(hObject, eventdata, handles)
    setEditTextDefaultBackground(hObject);
end

function edtQ2_CreateFcn(hObject, eventdata, handles)
    setEditTextDefaultBackground(hObject);
end

function edtQ3_CreateFcn(hObject, eventdata, handles)
    setEditTextDefaultBackground(hObject);
end

function edtX_CreateFcn(hObject, eventdata, handles)
    setEditTextDefaultBackground(hObject);
end

function edtY_CreateFcn(hObject, eventdata, handles)
    setEditTextDefaultBackground(hObject);
end

function edtZ_CreateFcn(hObject, eventdata, handles)
    setEditTextDefaultBackground(hObject);
end

% Utility functions for setting default background
function setSliderDefaultBackground(hObject)
    if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor',[.9 .9 .9]);
    end
end

function setEditTextDefaultBackground(hObject)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


% Función para enviar los ángulos al Arduino por comunicación serial

function enviarAngulosSerial(q, serialPort)
    % Convierte los ángulos a grados

    q_deg = rad2deg(q);
    % Formatea el mensaje como una cadena de texto con salto de línea al final
    mensaje = sprintf('%d,%d,%d\n', q_deg(1), q_deg(2), q_deg(3));
    % Convierte el mensaje a formato de tipo uint8 (necesario para fwrite)
  
    disp(mensaje);
    % Envía el mensaje al puerto serial
  fprintf(serialPort, mensaje);
end
